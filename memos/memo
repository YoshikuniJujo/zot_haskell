2011.09.09 Fri.

\f -> ( f one ) zero
=> S [f]( f one ) ( K zero )
=> S ( S I ( K one ) ) ( K zero )
=> ( ( S ( ( S I ) ( K one ) ) ) ( K zero ) )

( ( 101010100 ( ( 101010100 100 ) ( 1010100 one ) ) ) ( 1010100 zero ) )

1 1 101010100 1 1 101010100 100   1 1010100 1         1 1010100 0

\f -> f one
=> S I ( K one )
=> 1 1 101010100 100 1 1010100 1

echo -n 'lambda expression' | runhaskell lambdaToSKI.hs | \
runhaskell skiToZot.hs | runhaskell addEcho.hs arg | runhaskell zot.hs

cat flipPrint.lambda| runhaskell lambdaToSKI.hs| runhaskell skiToZot.hs | \
runhaskell addEcho.hs 10 | runhaskell zot.hs

reverse:
( \x -> x x ( \x -> x ) ) ( \self -> \remainder -> \c ->
interrogate c ( self self ) ( self self ) ( \print -> remainder ( print c ) ) )

reverse 1 0 1 1

self = \s r c -> int c ( s s ) ( s s ) $ \p -> r $ p c

( \x -> x x ( \x -> x ) ) self 1 0 1 1
=> ( \x -> x x I ) self 1 0 1 1
=> self self I 1 0 1 1
=> ( \s r c -> int c ( s s ) ( s s ) $ \p -> r $ p c ) self I 1 0 1 1
=> int 1 ( self self ) ( self self ) $ \p -> p 1 ) 0 1 1
=> self self ( \p -> p 1 ) 0 1 1
=> ( \s r c -> int c ( s s ) ( s s ) $ \p -> r $ p c ) self ( \p -> p 1 ) 0 1 1
=> int 0 ( self self ) ( self self ) $ \p -> ( \p -> p 1 ) $ p 0 ) 1 1
=> self self ( \p -> p 0 1 ) 1 1
=> self self ( \p -> p 1 0 1 ) 1
=> self self ( \p -> p 1 1 0 1 ) output
=> \p -> ( \p -> p 1 1 0 1 ) $ p output
=> \p -> ( p output 1 1 0 1 )

self = \s r c -> int c ( s s ) ( s s ) $ \p -> r $ p c
 (改良)
self = \s r c -> int c ( s s ) ( s s ) $ \p -> r $ int c ( p c ) ( p c ) p
or
self = \s r c -> int c ( s s $ \p -> r $ p c ) ( s s $ \p -> r $ p c )
	( \p -> r p )
下のはだめだ。
しかし、上のほうもスピードに問題がある。
self = \s r c -> int c ( s s 

self2 = \s r c -> int c ( s s ) ( s s ) $ \p -> p $ r c 

\p -> r $ p c ==> \p -> p c1 ==> \p -> ( p c2 ) c1
\p -> p $ r c ==> \p -> p c1 ==> \p -> p ( 

\f -> \x -> f x ==> \f -> f ==> I

2011.09.10 Sat.

(\z14 -> (((((((z14 (\x35 -> x35)) (\x37 -> x37)) (\x39 -> x39))
(\x41 -> (\y41 -> x41))) (\y48 -> (((\z6 -> (\z9 -> (\z14 ->
(((((((z14 (\x35 -> x35)) (\x37 -> x37)) (\x39 -> x39))
(\x41 -> (\y41 -> x41))) (\y48 -> ((z9 (\z77 -> (z6 ((\z82 -> (z82 z14)) z77))))
((\y86 -> z9) z14)))) ((\z91 -> (\y93 -> ((z9 (\z122 -> (z6 ((\z127 ->
(z127 z91)) z122)))) ((\y131 -> z9) z91)))) z14)) ((\y135 -> z6) z14)))))
(\z77 -> ((\x4 -> x4) ((\z82 -> (z82 z14)) z77)))) ((\y86 -> (\z6 -> (\z9 ->
(\z14 -> (((((((z14 (\x35 -> x35)) (\x37 -> x37)) (\x39 -> x39)) (\x41 ->
(\y41 -> x41))) (\y48 -> ((z9 (\z77 -> (z6 ((\z82 -> (z82 z14)) z77))))
((\y86 -> z9) z14)))) ((\z91 -> (\y93 -> ((z9 (\z122 -> (z6 ((\z127 ->
(z127 z91)) z122)))) ((\y131 -> z9) z91)))) z14)) ((\y135 -> z6) z14))))))
z14)))) ((\z91 -> (\y93 -> (((\z6 -> (\z9 -> (\z14 -> (((((((z14 (\x35 -> x35))
(\x37 -> x37)) (\x39 -> x39)) (\x41 -> (\y41 -> x41))) (\y48 -> ((z9 (\z77 ->
(z6 ((\z82 -> (z82 z14)) z77)))) ((\y86 -> z9) z14)))) ((\z91 -> (\y93 ->
((z9 (\z122 -> (z6 ((\z127 -> (z127 z91)) z122)))) ((\y131 -> z9) z91)))) z14))
((\y135 -> z6) z14))))) (\z122 -> ((\x4 -> x4) ((\z127 -> (z127 z91)) z122))))
((\y131 -> (\z6 -> (\z9 -> (\z14 -> (((((((z14 (\x35 -> x35)) (\x37 -> x37))
(\x39 -> x39)) (\x41 -> (\y41 -> x41))) (\y48 -> ((z9 (\z77 -> (z6 ((\z82 ->
(z82 z14)) z77)))) ((\y86 -> z9) z14)))) ((\z91 -> (\y93 -> ((z9 (\z122 ->
(z6 ((\z127 -> (z127 z91)) z122)))) ((\y131 -> z9) z91)))) z14))
((\y135 -> z6) z14)))))) z91)))) z14)) ((\y135 -> (\x4 -> x4)) z14)))

(\z14 -> (z14 (\x35 -> x35) (\x37 -> x37) (\x39 -> x39) (\x41 y41 -> x41)
(\y48 -> ((\z6 z9 z14 -> (z14 (\x35 -> x35) (\x37 -> x37) (\x39 -> x39)
(\x41 y41 -> x41) (\y48 -> (z9 (\z77 -> (z6 ((\z82 -> (z82 z14)) z77)))
((\y86 -> z9) z14))) ((\z91 y93 -> (z9 (\z122 -> (z6 ((\z127 ->
(z127 z91)) z122))) ((\y131 -> z9) z91))) z14) ((\y135 -> z6) z14)))
(\z77 -> ((\x4 -> x4) ((\z82 -> (z82 z14)) z77))) ((\y86 z6 z9 z14 -> (z14
(\x35 -> x35) (\x37 -> x37) (\x39 -> x39) (\x41 y41 -> x41) (\y48 -> (z9
(\z77 -> (z6 ((\z82 -> (z82 z14)) z77))) ((\y86 -> z9) z14))) ((\z91 y93 ->
(z9 (\z122 -> (z6 ((\z127 -> (z127 z91)) z122))) ((\y131 -> z9) z91))) z14)
((\y135 -> z6) z14))) z14))) ((\z91 y93 -> ((\z6 z9 z14 -> (z14 (\x35 -> x35)
(\x37 -> x37) (\x39 -> x39) (\x41 y41 -> x41) (\y48 -> (z9 (\z77 -> (z6
((\z82 -> (z82 z14)) z77))) ((\y86 -> z9) z14))) ((\z91 y93 -> (z9 (\z122 ->
(z6 ((\z127 -> (z127 z91)) z122))) ((\y131 -> z9) z91))) z14)
((\y135 -> z6) z14))) (\z122 -> ((\x4 -> x4) ((\z127 -> (z127 z91)) z122)))
((\y131 z6 z9 z14 -> (z14 (\x35 -> x35) (\x37 -> x37) (\x39 -> x39)
(\x41 y41 -> x41) (\y48 -> (z9 (\z77 -> (z6 ((\z82 -> (z82 z14)) z77)))
((\y86 -> z9) z14))) ((\z91 y93 -> (z9 (\z122 -> (z6 ((\z127 ->
(z127 z91)) z122))) ((\y131 -> z9) z91))) z14) ((\y135 -> z6) z14))) z91))) z14)
((\y135 x4 -> x4) z14)))

self = \s r c -> int c ( s s ) ( s s ) $ \p -> r $ p c
	|
	V
self = \r s c -> int c ( s $ \p -> r $ p c ) ( s $ \p -> r $ p c ) s

( \x -> x ( \x -> x ) x ) self =>
self I self 0 1 1 op => int 0 ( self $ \p -> p 0 ) ( .. ) self =>
self ( \p -> p 0 ) self 1 1 op => int 1 ( .. ) ( self $ \p -> ( \p -> p 0 ) $ p 1 ) self =>
self ( \p -> ( p 1 ) 0 ) self 1 op => int 1 ( .. ) ( self $ \p -> ( \p -> ( p 1 ) 0 ) $ p 1 ) self =>
self ( \p -> ( ( p 1 ) 1 ) 0 ) self op =>
int op ( .. ) ( .. ) self => self

	|
	V
self = \r s c -> int c ( \_ -> s ( \p -> r $ p c ) s ) ( \_ -> s ( \p -> r $ p c ) s ) r

self I self 0 op => self ( \p -> I $ p c ) self op => \p -> p c

--

print = ( \_ -> s ( \p -> r $ p c ) s )
self = \r s c -> c I I I K print print r

( \x -> x x I ) self => S ( S I I ) ( K I ) self

\x -> x x I => \x -> ( x x ) I => [x]( ( x x ) I ) => S [x]( x x ) ( K I ) =>
S ( S I I ) ( K I )

print => \p -> r $ p c => [p]( r $ p c ) => S ( K r ) [p]( p c ) => S ( K r ) ( S I $ K c )
[c]print => [c][P]( r $ p c ) => [c]( S ( K r ) ( S I $ K c ) ) =>
S ( K $ S $ K r ) [c]( S I $ K c ) =>
S ( K $ S $ K r ) ( S ( K $ S I ) K ) --- PC

print => K $ s ( \p -> r $ p c ) s
self => \r s c -> c I I I K print print r => [r]( \s c -> c I I I K print print r ) =>
[r][s]( \c -> c I I I K print print r ) => [r][s][c]( c I I I K print print r ) =>

[c]( c I I I K print print r ) => [c]( ( c I I I K print print ) r ) =>
S [c]( c I I I K print print ) $ K r => 

[c]( c I I I K print print ) => [c]( ( c I I I K print ) print ) =>
S [c]( c I I I K print ) PC => S ( S [c]( c I I I K ) PC ) PC =>
S ( S ( S [c]( c I I I ) $ K K ) PC ) PC => 

--

\x -> \x -> y => [x]( \x -> y ) => K[x]y => K ( K y )

\x -> \y -> y => [x]( \y -> y ) => [x][y]y => [x]I => KI

\x y -> y x => [x]( \y -> y x ) => [x][y]( y x ) => [x]( S I $ K x ) =>
S ( K $ S I ) K => ( ( S ( K ( S I ) ) ) K ) => ``s`k`sik

--

other-modules をセットする必要がある。

zotToSKI 等々のコマンドを zot zotToSki や zot skiToZot や zot run [arg] 等にまとめようかな。
そうすると list up してみると、
zot lambdaToSki
zot skiToZot
zot run [arg]
zot zotToSki
zot skiToLambda n [-h]

となり、また、lambda file の実行は
cat hoge.lambda | zot lambdaToSki | zot skiToZot | zot run "..." となる。

しかし、arg を取るというよりは、
cat hoge.zot - | zot run
という形でひょう準入力を利用するべきかもしれない。

あるいはもっと普通に zot hoge.zot とすると入力をひょう準入力から得るという仕様のほうが良いか。
zot - とすると、プログラム自体もひょう準入力から得るようにする。
zot run の代わりに zot - ということになる。

新しい list
zot -
zot hoge.zot
zot lambdaToSki
zot skiToLambda
zot skiToZot
zot zotToSki

--

次は、zot hoge.zot の形を実現しよう。

2011.09.12 Mon.

putModTree の bug を発見。
正規表現でファイル名の頭の部分にマッチしてしまう。
すぐなおせると思う。

e	\c -> c I
zero	\c -> c ( \f -> f S K )
one	\c L -> L ( \l R -> R ( \r -> c ( l r ) ) )

e one => \L -> L ( \l R -> R ( \r -> l r ) )

e one zero => ( \L -> ... ) zero => zero ( \l R -> ... ) =>
( \c -> ... ) ( \l R -> ... ) => ( \l R -> ... ) ( \f -> f S K ) =>
\R -> R ( \r -> r S K )

e one zero zero => ( \R -> R ( \r -> r S K ) ) zero =>
zero ( \r -> r S K ) => ( \c -> ... ) ( \r -> r S K ) =>
( \r -> r S K ) ( \f -> f S K ) => S K S K

e one one => one ( \l R -> R ( \r -> l r ) ) =>
( \c L -> L ( \l R -> R ( \r -> c ( l r ) ) ) ) ( \l R -> R ( \r -> l r ) ) =>
\L -> L ( \l R -> R ( \r -> ( \l R -> R ( \r -> l r ) ) ( l r ) ) ) =>
\L -> L ( \l R -> R ( \r -> ( \R -> R ( \r' -> ( l r' ) r ) ) ) )

e one one zero zero zero =>

continuation

f x --> \c -> c $ f x => ( \c -> c f ) ( \c -> c x )

( \c -> c ( \x c -> c $ f x ) ) ( \c -> c x ) =>
( c -> c x ) ( \x c -> c $ f x ) => \c -> c $ f x

( \x c -> c $ f x ) $ x => \c -> c $ f x

return a => \k -> k a
c >>= f => \k -> c ( \a -> f a k )
callCC f => \k -> f ( \a -> \_ -> k a ) k

callCC ( \exit -> return x >>= exit y >> return z ) => callCC prg
\k -> prg ( \a -> \_ -> k a ) k =>
\k -> ( \exit -> return x >>= exit y >> return z ) ( \a -> \_ -> k a ) k =>
\k -> ( return x >>= ( \a -> \_ -> k a ) y >>= \_ -> return z ) k =>
\k -> ( return x >>= \_ -> k y >>= \_ -> return z ) k

( \c -> c x ) ( \x c -> c $ f x ) ( \x c -> c $ g x )
	|
	V
\k -> ( \c -> c x ) ( \x _ -> k $ f x ) ( \x c -> c $ g x ) k
	
\k -> ( \c -> c x ) ( \x c -> if cond then k $ f x else c $ f x ) ( .. ) k

x f g = g ( f x )

empty => ( $ I )
zero => ( $ \f -> f s k ) => ( $ i )
one => \c -> ( $ \l -> ( $ \r -> c $ l r ) )

empty one => ( $ \l -> ( $ \r -> l r ) )
empty one zero => ( $ \l -> ( $ \r -> l r ) ) ( $ \f -> f s k ) =>
( $ \r -> r s k ) => ( $ i )

( $ X ) ( $ Y ) => ( $ Y ) X => X Y

empty one one =>
( $ \l -> ( $ \r -> l r ) ) ( \c -> ( $ \l -> ( $ \r -> c $ l r ) ) =>
( $ \l -> ( $ \r -> ( \l' -> ( $ \r' -> l' r' ) ) $ l r ) ) =>
( $ \l -> ( $ \r -> ( $ \r' -> l r r' ) ) )

X => ( $ x )
Y => ( $ y )
z => ( $ z )
empty one one ( $ X ) ( $ Y ) ( $ Z ) =>
( $ \l -> ( $ \r -> ( $ \r' -> l r r' ) ) ) ( $ X ) ( $ Y ) ( $ Z ) =>
( $ \r -> ( $ \r' -> X r r' ) ) ( $ Y ) ( $ Z ) =>
( $ \r' -> X Y r' ) ( $ Z ) => X Y Z
empty one ( $ X ) one ( $ Y ) ( $ Z ) =>
( $ \l -> ( $ \r -> l r ) ) ( $ X ) one ( $ Y ) ( $ Z ) =>
( $ \r -> X r ) one ( $ Y ) ( $ Z ) =>
( $ \r -> X r ) ( \c -> ( $ \l -> ( $ \r -> c $ l r ) ) ) ( $ Y ) ( $ Z ) =>
( $ \l -> ( $ \r -> ( \r' -> X r' ) $ l r ) ) ( $ Y ) ( $ Z ) =>
( $ \l -> ( $ \r -> X ( l r ) ) ) ( $ Y ) ( $ Z ) =>
( $ \r -> X ( Y r ) ) ( $ Z ) => X ( Y Z )

( $ some ) one ( $ X ) =>
( $ some ) ( \c -> ( $ \l -> ( $ \r -> c $ l r ) ) ) ( $ X ) =>
( $ \l -> ( $ \r -> some $ l r ) ) ( $ X ) =>
( $ \r -> some $ X r )

( $ some ) one ( $ X ) one =>
( $ \r -> some $ X r ) ( \c -> ( $ \l -> ( $ \r -> c $ l r ) ) ) =>
( $ \l -> ( $ \r -> ( \r' -> some $ X r' ) $ l r ) ) =>
( $ \l -> ( $ \r -> some $ X ( l r ) )

some one one => ( $ \l -> ( $ \r -> ( $ \r' -> some l r r' ) ) )

( $ some ) one == ( $ \l -> ( $ \r -> some $ l r ) )
( $ some ) one one =>
( $ \l -> ( $ \r -> ( \l' -> ( $ \r' -> some $ l' r' ) ) $ l r ) ) =>
( $ \l -> ( $ \r -> ( $ \r' -> some $ ( l r ) r' ) ) )

( $ some( n ) ) one == ( $ some ( n + 1 ) )
some( n + 1 ) = \l -> ( $ \r -> some( n ) $ l r )
some( n + 2 ) = \l -> ( $ \r -> ( $ \r' -> some( n ) $ ( l r ) r' ) )

empty => ( $ I )
zero => ( $ \f -> f s k ) => ( $ i )
one => \c -> ( $ \l -> ( $ \r -> c $ l r ) )

empty some => x ( some == ( $ x ) )
empty one zero some => i x
empty one some zero => x i

empty zero => ( $ I ) ( $ i ) => i
some zero => some ( $ i )
some one zero zero => some ( \c -> ( $ \l -> ( $ \r -> c $ l r ) ) ( $ i ) ( $ i )

empty one => ( $ \l -> ( $ \r -> l r ) )
empty one zero => ( $ i )

empty zero => i
empty one zero zero => i i
empty one one zero zero zero => i i i
empty some => i i ... i

( $ I ) ( $ ( $ f ) ) ( $ x ) => ( $ f ) ( $ x ) => f x
( $ I ) ( $ ( $ g ) ) ( $ ( $ h ) ) ( $ x ) => ( $ g ) ( $ ( $ h ) ) ( $ x ) =>
g ( $ h ) ( $ x ) => h g ( $ x )

( $ I ) ( \c -> ( $ \l -> ( $ \r -> c $ l r ) ) ) ( $ x ) ( $ y ) = x y
( $ X ) ( \c -> ( $ \l -> ( $ \r -> c $ l r ) ) ) ( $ x ) ( $ y ) = X ( x y )
( $ X ) ( \c -> ( $ \l -> ( $ \r -> c $ l r ) ) ) ( $ x ) =>
( $ \l -> ( $ \r -> X $ l r ) ) ( $ x ) => ( $ \r -> X $ x r )

( $ X ) one = ( $ \l -> ( $ \r -> X $ l r ) )
( $ X ) one ( $ x ) = ( $ \r -> X $ x r )
( $ X ) one ( $ x ) ( $ y ) = X ( x y )

( $ X ) one one = ( $ \l -> ( $ \r -> X $ l r ) ) ( \c -> ... ) =>
( $ \l -> ( $ \r -> ( $ \r' -> X $ ( l r ) r' ) ) )

2011.09.13 Tue.

\z0 -> z0 ( ( \z16 -> z0 ( ( \z22 -> z22 z22 ) z16 ) ) z10 )
\g -> g ( ( \y -> g ( ( \x -> x x ) y ) ) z )
\g -> g ( g ( ( \x -> x x ) z ) )
\g -> g ( g ( z z ) )

\g -> g ( ( \x -> g ( x x ) ) ( \x -> g ( x x ) ) ) =>
\g -> ( \x -> g ( x x ) ) ( \x -> g ( x x ) )

2011.09.14 Wed.

次は Parse の ( >*> ) のリファクタリングから。
